from typing import List

from aiogram.types import Message
from aiogram.types.user import User as tgTypeUser
from aiogram.utils.markdown import hbold
from src.bot.schemas import User
from src.parser.schemas import LCUserFromGraphQLQuery

from src.parser.schemas import LCSubmission

from src.database.utils import updateLCHandle, getLastSubmissions

import requests


newHandleUsersStanding = set()


def validateToUserSchema(tgUser: tgTypeUser) -> User:
    try:
        return User(
            tgUser.id,
            ""
        )
    except Exception:
        return None


def getMessageAboutChangingLCHandler(message: Message) -> str:
    messageLCHandle = message.text
    if not isCorrectLCHandle(messageLCHandle):
        return f"–•—ç–Ω–¥–ª {hbold(messageLCHandle)} –Ω–µ –≤–∞–ª–∏–¥–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—É–∫—Ü–∏–∏"
    updateLCHandle(message.from_user.id, messageLCHandle)
    htmlLink: str = f"https://leetcode.com/{messageLCHandle}"
    messageToUser: str = (f"–í–∞—à —Ö—ç–Ω–¥–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {messageLCHandle}. –°–æ–≥–ª–∞—Å–Ω–æ, —Ö—ç–Ω–¥–ª—É, –≤–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {hbold(htmlLink)}"
                          f"\n\n<b>–ß—Ç–æ –±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ LeetCode.com, "
                          f"–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <u>/viewLCSubmissions</u></b>\n"
                          f"<b>–ß—Ç–æ –±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —Å–∞–π—Ç–µ LeetCode.com, "
                          f"–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π <u>/viewMyLCStats</u></b>")
    return messageToUser


def isCorrectLCHandle(lcHadle: str) -> bool:
    try:
        testURL = f"https://leetcode.com/{lcHadle}"
        response = requests.get(testURL)
        return response.status_code == 200
    except Exception:
        return False


def getVisualDiffSymbol(difficulty: str) -> str:
    if difficulty == "Easy":
        return "üü¢"
    elif difficulty == "Medium":
        return "üü°"
    return "üî¥"


def getMessageAboutSubmissions(userID: int) -> [str]:
    try:
        lastUserSubmissions: List[LCSubmission] = getLastSubmissions(userID)
        sumbissionsCount: int = len(lastUserSubmissions)

        messageToUser: str
        if sumbissionsCount == 0:
            utilsMessage: str = "–ö—Å—Ç–∞—Ç–∏, –≤–æ—Ç —Ç–µ–±–µ —Ä–µ—à–µ–Ω–∏–µ Golang'e:"
            messageToUser = (f"–£ —Ç–µ–±—è –Ω–µ—Ç—É –Ω–∏ –æ–¥–Ω–æ–π –ø—Ä–∏–Ω—è—Ç–æ–π Accept'–æ–π –∑–∞–¥–∞—á–∏. –†–µ—à–∏ —Ö–æ—Ç—è –±—ã TwoSum. \n\n"
                             f"**{utilsMessage}** \n```go\n"
                             f"func twoSum(nums []int, target int) []int {{\n"
                             f"    mpVars := make(map[int]int)\n"
                             f"    mpKeys := make(map[int]bool)\n"
                             f"    for i, num := range nums {{\n"
                             f"        if mpKeys[target - num] {{\n"
                             f"            return []int{{mpVars[target - num], i}}\n"
                             f"        }}\n"
                             f"        mpKeys[num] = true\n"
                             f"        mpVars[num] = i\n"
                             f"    }}\n"
                             f"    return []int{{}}\n"
                             f"}}\n"
                             f"```")
            return [messageToUser, 'Markdown']
        if sumbissionsCount == 1:
            messageToUser = f"–¢–≤–æ—è –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: \n\n"
        elif sumbissionsCount != 5:
            messageToUser = f"–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {sumbissionsCount} –ø–æ–ø—ã—Ç–∫–∏:\n\n"
        else:
            messageToUser = f"–¢–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {sumbissionsCount} –ø–æ–ø—ã—Ç–∫–æ–∫:\n\n"
        for sumbissionIndex, submission in enumerate(lastUserSubmissions):
            typedSumbission: LCSubmission = submission
            htmlLinkToTask: str = f"https://leetcode.com/problems/{typedSumbission.task.titleSlug}"
            visualDiffSymbol: str = getVisualDiffSymbol(typedSumbission.task.difficulty)
            messageToUser += (f"{hbold(sumbissionIndex + 1)}. {hbold(typedSumbission.task.id)}."
                              f"{hbold(typedSumbission.task.name)}\n"
                              f"Cc—ã–ª–∫–∞ –Ω–∞ –∑–∞–¥–∞—á—É: {hbold(htmlLinkToTask)}\n"
                              f"–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏: {hbold(typedSumbission.task.difficulty)} {visualDiffSymbol}\n"
                              f"–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è: {hbold(typedSumbission.date)}")
            if sumbissionIndex != sumbissionsCount - 1:
                messageToUser += "\n\n"

        return [messageToUser, 'HTML']
    except Exception as e:
        return ["", ""]


def getMessageAboutLCStatistics(stats: LCUserFromGraphQLQuery) -> str:
    try:
        messageToUser: str = "<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ LeetCode –ø—Ä–æ—Ñ–∏–ª—è:</b> \n\n"
        messageToUser += f"–†–µ–π—Ç–∏–Ω–≥: {stats.ranking}\n"
        messageToUser += f"–í–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è, —Å–æ–≥–ª–∞—Å–µ–Ω–æ LC: {stats.name}\n"
        messageToUser += f"–í–∞—à–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {stats.reputation}\n\n"
        messageToUser += "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º:</b>\n"

        for index, languageState in enumerate(stats.languagesState):
            messageToUser += (f"<b>{index + 1}</b>. –ù–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞: {languageState.languageName}, "
                              f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –Ω–µ–º: {languageState.tasksCount}\n")

        return messageToUser
    except Exception as e:
        pass
